/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt { quick-tap-ms = <160>; };

&mt { quick-tap-ms = <160>; };

&kscan0 {
    debounce-press-ms = <1>;
    debounce-release-ms = <10>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_bootldr {
            bindings = <&bootloader>;
            key-positions = <0 5 53>;
        };

        combo_bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <53 38 5>;
        };

        combo_bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <39 53 5>;
        };

        combo_bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <53 5 40>;
        };

        combo_bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <53 5 41>;
        };

        combo_bare_ru_tog {
            bindings = <&tog 1>;
            key-positions = <6 54 25>;
            layers = <0 1>;
        };

        combo_bt_3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <53 42 5>;
        };

        combo_ru_en_tog {
            bindings = <&tog 4>;
            key-positions = <6 54 11>;
            layers = <1 4>;
        };

        combo_en_to_bare {
            bindings = <&mc_to_bare_en>;
            key-positions = <54 6 25>;
            layers = <4>;
        };

        output_toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <54 6 22>;
        };

        combo_bt_4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <43 5 53>;
        };
    };

    behaviors {
        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&mc_single_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 18 17 16 15 14 13 12 26 27 28 29 30 31 42 43 41 40 39 38 50 51 52 53 54 55 56 57 44 45 46 47 48 49 37 36 35 34 32 19 33 20 21 22 23 24 25 6 7 8 9 10 11>;
        };

        as_single: as_single {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_SINGLE";
            bindings = <&mc_single_tap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        as_sw_single: as_sw_single {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_SW_SINGLE";
            bindings = <&mc_sw_tap_sw>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        sw_as_sw_single: sw_as_sw_single {
            compatible = "zmk,behavior-hold-tap";
            label = "SW_AS_SW_SINGLE";
            bindings = <&mc_sw_tap_sw>, <&mc_sw_tap_sw>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        sw_as_single: sw_as_single {
            compatible = "zmk,behavior-hold-tap";
            label = "SW_AS_SINGLE";
            bindings = <&mc_single_tap>, <&mc_sw_tap_sw>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    macros {
        mc_ru_en_sw: mc_ru_en_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&tog 4>;

            label = "MC_RU_EN_SW";
        };

        mc_to_bare_en: mc_to_bare_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 4 &tog 1>;
            label = "MC_TO_BARE_EN";
        };

        mc_single_tap: mc_single_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_tap>, <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "MC_SINGLE_TAP";
        };

        mc_sw_tap_sw: mc_sw_tap_sw {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_SW_TAP_SW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bare_keys_layer {
            bindings = <
                       &kp ESCAPE  &kp N1  &kp N2    &kp N3     &kp N4    &kp N5       &kp N6    &kp N7       &kp N8     &kp N9    &kp N0    &kp BSPC
&mt LEFT_SHIFT ESCAPE  &kp TAB     &kp Q   &kp W     &kp E      &kp R     &kp T        &kp Y     &kp U        &kp I      &kp O     &kp P     &kp LBKT  &kp RET
                       &kp CAPS    &kp A   &kp S     &kp D      &kp F     &kp G        &kp H     &kp J        &kp K      &kp L     &kp SEMI  &kp SQT
                       &kp LCTRL   &kp M   &kp Z     &kp X      &kp C     &kp V        &kp B     &kp N        &kp COMMA  &kp DOT   &kp FSLH  &kp RBKT
                                           &kp LGUI  &kp SPACE  &kp LALT  &kp RSHFT    &kp RALT  &lt 1 SPACE  &kp SPACE  &kp RGUI
            >;
        };

        as_ru_layer {
            bindings = <
               &kp ESCAPE    &kp N1       &kp N2       &kp N3           &kp N4       &kp N5         &kp N6       &kp N7       &kp N8               &kp N9           &kp N0                    &kp BSPC
&mt LSHFT ESC  &kp TAB       &as LS(Q) Q  &as LS(W) W  &as LS(E) E      &as LS(R) R  &as LS(T) T    &as LS(Y) Y  &as LS(U) U  &as LS(I) I          &as LS(O) O      &as LS(P) P               &as LS(LBKT) LBKT  &kp ENTER
               &mc_ru_en_sw  &as LS(A) A  &as LS(S) S  &as LS(D) D      &as LS(F) F  &as LS(G) G    &as LS(H) H  &as LS(J) J  &as LS(K) K          &as LS(L) L      &as LS(SEMI) SEMI         &as LS(SQT) SQT
               &kp LCTRL     &as LS(M) M  &as LS(Z) Z  &as LS(X) X      &as LS(C) C  &as LS(V) V    &as LS(B) B  &as LS(N) N  &as LS(COMMA) COMMA  &as LS(DOT) DOT  &as_single FSLH QUESTION  &as LS(RBKT) RBKT
                                          &kp LGUI     &lt_spc 2 SPACE  &kp LALT     &kp RSHFT      &kp RALT     &lt 3 SPACE  &lt_spc 2 SPACE      &kp RGUI
            >;
        };

        nav_ru_layer {
            bindings = <
        &kp ESCAPE   &kp N1     &kp N2                      &kp N3                      &kp N4                       &kp N5                          &kp N6                  &kp N7                  &kp N8                 &kp N9                 &kp N0                     &kp BSPC
&trans  &kp ESC      &trans     &sw_as_sw_single DOLLAR AT  &as_sw_single AMPS PERCENT  &trans                       &sw_as_sw_single TILDE GRAVE    &trans                  &as_single EXCL LS(N7)  &kp UP                 &kp BSPC               &trans                     &sw_as_sw_single LBRC LBKT         &trans
        &kp TAB      &kp LCTRL  &kp LSHFT                   &kp LALT                    &kp LGUI                     &as_single EQUAL LS(EQUAL)      &as_single UNDER MINUS  &kp LEFT                &kp DOWN               &kp RIGHT              &as_single LS(N4) LS(N6)   &as_sw_single SINGLE_QUOTE LS(N2)
        &kp LS(TAB)  &trans     &trans                      &trans                      &sw_as_sw_single CARET HASH  &as_sw_single PIPE LS(BSLH)     &as_single BSLH LS(N8)  &as_single SLASH RET    &as_sw_single LT LPAR  &as_sw_single GT RPAR  &as_single SLASH QUESTION  &sw_as_sw_single RBRC RBKT
                                &kp LGUI                    &lt_spc 2 SPACE             &kp LALT                     &kp RSHFT                       &kp RALT                &lt 3 SPACE             &lt_spc 2 SPACE        &kp RGUI
            >;
        };

        num_ru_layer {
            bindings = <
        &kp ESCAPE  &kp N1  &kp N2    &kp N3           &kp N4    &kp N5                      &kp N6                      &kp N7       &kp N8           &kp N9    &kp N0                     &kp BSPC
&trans  &kp TAB     &kp F9  &kp F10   &kp F11          &kp F12   &mc_single_tap LS(N9)       &mc_single_tap LS(N0)       &kp N7       &kp N8           &kp N9    &kp BSPC                   &sw_as_sw_single LBRC LBKT         &kp ENTER
        &none       &kp F5  &kp F6    &kp F7           &kp F8    &mc_single_tap PLUS         &mc_single_tap MINUS        &kp N4       &kp N5           &kp N6    &as_single LS(N4) LS(N6)   &as_sw_single SINGLE_QUOTE LS(N2)
        &trans      &kp F1  &kp F2    &kp F3           &kp F4    &mc_single_tap KP_DIVIDE    &mc_single_tap KP_ASTERISK  &kp N1       &kp N2           &kp N3    &as_single SLASH QUESTION  &sw_as_sw_single RBRC RBKT
                            &kp LGUI  &lt_spc 2 SPACE  &kp LALT  &kp RSHFT                   &kp RALT                    &lt 3 SPACE  &lt_spc 2 SPACE  &kp RGUI
            >;
        };

        as_en_layer {
            bindings = <
               &kp ESCAPE    &kp N1       &kp N2       &kp N3           &kp N4       &kp N5         &kp N6       &kp N7       &kp N8               &kp N9                  &kp N0                   &kp BSPC
&mt LSHFT ESC  &kp TAB       &as LS(Q) Q  &as LS(W) W  &as LS(E) E      &as LS(R) R  &as LS(T) T    &as LS(Y) Y  &as LS(U) U  &as LS(I) I          &as LS(O) O             &as LS(P) P              &as_single LS(LBKT) LBKT             &kp ENTER
               &mc_ru_en_sw  &as LS(A) A  &as LS(S) S  &as LS(D) D      &as LS(F) F  &as LS(G) G    &as LS(H) H  &as LS(J) J  &as LS(K) K          &as LS(L) L             &as_single SEMI COLON    &as_single APOSTROPHE DOUBLE_QUOTES
               &kp LCTRL     &as LS(M) M  &as LS(Z) Z  &as LS(X) X      &as LS(C) C  &as LS(V) V    &as LS(B) B  &as LS(N) N  &as LS(COMMA) COMMA  &as_single LS(DOT) DOT  &as_single PERIOD COMMA  &as_single LS(RBKT) RBKT
                                          &kp LGUI     &lt_spc 2 SPACE  &kp LALT     &kp RSHFT      &kp RALT     &lt 3 SPACE  &lt_spc 2 SPACE      &kp RGUI
            >;
        };

        nav_en_layer {
            bindings = <
        &kp ESCAPE   &kp N1     &kp N2                &kp N3                   &kp N4                 &kp N5                    &kp N6                       &kp N7                           &kp N8              &kp N9              &kp N0  &kp BSPC
&trans  &kp ESCAPE   &trans     &as_single DOLLAR AT  &as_single AMPS PERCENT  &trans                 &as_single TILDE GRAVE    &trans                       &as_single EXCLAMATION QUESTION  &kp UP              &kp BSPC            &trans  &trans    &trans
        &kp TAB      &kp LCTRL  &kp LSHFT             &kp LALT                 &kp LGUI               &as_single EQUAL PLUS     &as_single UNDERSCORE MINUS  &kp LEFT                         &kp DOWN            &kp RIGHT           &trans  &trans
        &kp LS(TAB)  &trans     &trans                &trans                   &as_single CARET HASH  &as_single PIPE SLASH     &as_single BSLH ASTERISK     &as_single DOT RET               &as_single LT LPAR  &as_single GT RPAR  &trans  &trans
                                &kp LGUI              &lt_spc 2 SPACE          &kp LALT               &kp RSHFT                 &kp RALT                     &lt 3 SPACE                      &lt_spc 2 SPACE     &kp RGUI
            >;
        };

        num_en_layer {
            bindings = <
        &kp ESCAPE  &kp N1  &kp N2    &kp N3           &kp N4    &kp N5                      &kp N6                      &kp N7       &kp N8           &kp N9    &kp N0    &kp BSPC
&trans  &kp TAB     &kp F9  &kp F10   &kp F11          &kp F12   &mc_single_tap LS(N9)       &mc_single_tap LS(N0)       &kp N7       &kp N8           &kp N9    &kp BSPC  &trans    &kp ENTER
        &none       &kp F5  &kp F6    &kp F7           &kp F8    &mc_single_tap PLUS         &mc_single_tap MINUS        &kp N4       &kp N5           &kp N6    &trans    &trans
        &trans      &kp F1  &kp F2    &kp F3           &kp F4    &mc_single_tap KP_DIVIDE    &mc_single_tap KP_ASTERISK  &kp N1       &kp N2           &kp N3    &trans    &trans
                            &kp LGUI  &lt_spc 2 SPACE  &kp LALT  &kp RSHFT                   &kp RALT                    &lt 3 SPACE  &lt_spc 2 SPACE  &kp RGUI
            >;
        };
    };
};
