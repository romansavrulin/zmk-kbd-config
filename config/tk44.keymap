/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF    0
#define NUM    1
#define ADJ    2

&lt {
    quick_tap_ms = <150>;
};

&mt {
    quick_tap_ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        kb_bootldr {
            bindings = <&bootloader>;
            key-positions = <40 6 1>;
        };

        bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <26 6 40>;
        };
    };

    behaviors {
        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LSHFT ESC  &kp TAB    &as LS(Q) Q  &as LS(W) W  &as LS(E) E  &as LS(R) R  &as LS(T) T    &as LS(Y) Y  &as LS(U) U  &as LS(I) I          &as LS(O) O      &as LS(P) P        &as LS(LBKT) LBKT  &kp ENTER
               &kp CAPS   &as LS(A) A  &as LS(S) S  &as LS(D) D  &as LS(F) F  &as LS(G) G    &as LS(H) H  &as LS(J) J  &as LS(K) K          &as LS(L) L      &as LS(SEMI) SEMI  &as LS(SQT) SQT
               &kp LCTRL  &as LS(M) M  &as LS(Z) Z  &as LS(X) X  &as LS(C) C  &as LS(V) V    &as LS(B) B  &as LS(N) N  &as LS(COMMA) COMMA  &as LS(DOT) DOT  &as LS(FSLH) FSLH  &as LS(RBKT) RBKT
                                                    &kp LWIN     &kp SPACE    &kp LALT       &lt 1 SPACE  &kp SPACE    &kp RGUI
            >;
        };

        num_layer {
            bindings = <
&trans  &kp TAB  &kp F9  &kp F10  &kp F11  &kp F12  &kp LS(N9)       &kp LS(N0)       &kp N7  &kp N8      &kp N9  &kp BSPC   &kp LS(N9)        &kp ENTER
        &none    &kp F5  &kp F6   &kp F7   &kp F8   &kp EQUAL        &kp MINUS        &kp N4  &kp N5      &kp N6  &kp SEMI   &kp SINGLE_QUOTE
        &trans   &kp F1  &kp F2   &kp F3   &kp F4   &kp KP_DIVIDE    &kp KP_ASTERISK  &kp N1  &kp N2      &kp N3  &kp SLASH  &kp LS(N0)
                                  &trans   &trans   &trans           &trans           &kp N0  &kp KP_DOT
            >;
        };
    };
};
