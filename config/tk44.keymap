/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF    0
#define NUM    1
#define ADJ    2

&lt { quick-tap-ms = <160>; };

&mt { quick-tap-ms = <160>; };

&kscan0 {
    debounce-press-ms = <1>;
    debounce-release-ms = <10>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_bootldr {
            bindings = <&bootloader>;
            key-positions = <40 6 1>;
        };

        combo_bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <26 6 40>;
        };

        combo_bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <40 6 27>;
        };

        combo_bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <40 6 28>;
        };

        combo_bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <40 6 29>;
        };

        combo_bare_ru_tog {
            bindings = <&tog 1>;
            key-positions = <41 7 13>;
            layers = <0 1>;
        };

        combo_bt_3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <6 40 30>;
        };

        combo_ru_en_tog {
            bindings = <&tog 4>;
            key-positions = <41 7 12>;
            layers = <1 4>;
        };

        combo_en_to_bare {
            bindings = <&mc_to_bare_en>;
            key-positions = <41 7 13>;
            layers = <4>;
        };

        output_toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <41 7 10>;
        };

        combo_bt_4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <6 40 31>;
        };
    };

    behaviors {
        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_lbrc_lbkt: ru_as_lbrc_lbkt {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_LBRC_LBKT";
            bindings = <&mc_ru_lbrc>, <&mc_ru_lbkt>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_siquote: ru_as_siquote {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_SIQUOTE";
            bindings = <&mc_ru_si_quote>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_rbrc_rbkt: ru_as_rbrc_rbkt {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_RBRC_RBKT";
            bindings = <&mc_ru_rbrc>, <&mc_ru_rbkt>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_lt: ru_as_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_LT";
            bindings = <&mc_ru_lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_gt: ru_as_gt {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_GT";
            bindings = <&mc_ru_gt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_tilde_grave: ru_as_tilde_grave {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_TILDE_GRAVE";
            bindings = <&mc_ru_tilde>, <&mc_ru_grave>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_dollar_at: ru_as_dollar_at {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_DOLLAR_AT";
            bindings = <&mc_ru_dollar>, <&mc_ru_at>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_caret_hash: ru_as_caret_hash {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_CARET_HASH";
            bindings = <&mc_ru_caret>, <&mc_ru_hash>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_pipe: ru_as_pipe {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_PIPE";
            bindings = <&mc_ru_pipe>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_amp: ru_as_amp {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_AMP";
            bindings = <&mc_ru_amp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&mc_single_spc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 5 6 7 8 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 41 43 4 9>;
        };

        as_single: as_single {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_SINGLE";
            bindings = <&mc_single_tap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        sw_as_single: sw_as_single {
            compatible = "zmk,behavior-hold-tap";
            label = "SW_AS_SINGLE";
            bindings = <&mc_single_tap>, <&mc_sw_tap_sw>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        as_sw_single: as_sw_single {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_SW_SINGLE";
            bindings = <&mc_sw_tap_sw>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        sw_as_sw_single: sw_as_sw_single {
            compatible = "zmk,behavior-hold-tap";
            label = "SW_AS_SW_SINGLE";
            bindings = <&mc_sw_tap_sw>, <&mc_sw_tap_sw>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    macros {
        mc_ru_lbkt: mc_ru_lbkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp LBKT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_LBKT";
        };

        mc_ru_lbrc: mc_ru_lbrc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp LBRC>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_LBRC";
        };

        mc_ru_si_quote: mc_ru_si_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp SINGLE_QUOTE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_SI_QUOTE";
        };

        mc_ru_rbkt: mc_ru_rbkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp RBKT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_RBKT";
        };

        mc_ru_rbrc: mc_ru_rbrc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp RIGHT_BRACE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_RBRC";
        };

        mc_ru_lt: mc_ru_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp LT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_LT";
        };

        mc_ru_gt: mc_ru_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp GT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_GT";
        };

        mc_ru_grave: mc_ru_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_GRAVE";
        };

        mc_ru_tilde: mc_ru_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp TILDE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_TILDE";
        };

        mc_ru_at: mc_ru_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp AT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_AT";
        };

        mc_ru_dollar: mc_ru_dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp DOLLAR>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_DOLLAR";
        };

        mc_ru_hash: mc_ru_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp HASH>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_HASH";
        };

        mc_ru_caret: mc_ru_caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp CARET>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_CARET";
        };

        mc_ru_pipe: mc_ru_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp PIPE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_PIPE";
        };

        mc_ru_amp: mc_ru_amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp AMPS>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_AMP";
        };

        mc_ru_en_sw: mc_ru_en_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&tog 4>;

            label = "MC_RU_EN_SW";
        };

        mc_to_bare_en: mc_to_bare_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 4 &tog 1>;
            label = "MC_TO_BARE_EN";
        };

        mc_single_spc: mc_single_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp SPACE>;

            label = "MC_SINGLE_SPC";
        };

        mc_single_dot: mc_single_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp DOT>;

            label = "MC_SINGLE_DOT";
        };

        mc_single_gt: mc_single_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp GT>;

            label = "MC_SINGLE_GT";
        };

        mc_single_lt: mc_single_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LT>;

            label = "MC_SINGLE_LT";
        };

        mc_single_bslh: mc_single_bslh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp BSLH>;

            label = "MC_SINGLE_BSLH";
        };

        mc_single_under: mc_single_under {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp UNDER>;

            label = "MC_SINGLE_UNDER";
        };

        mc_single_excl: mc_single_exl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp EXCL>;

            label = "MC_SINGLE_EXL";
        };

        mc_single_semic: mc_single_semic {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp SEMICOLON>;

            label = "MC_SINGLE_SEMIC";
        };

        mc_single_quote: mc_single_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp APOS>;

            label = "MC_SINGLE_QUOTE";
        };

        mc_single_lbrc: mc_single_qlbkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LEFT_BRACE>;

            label = "MC_SINGLE_QLBKT";
        };

        mc_single_rbrc: mc_single_rbrc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RIGHT_BRACE>;

            label = "MC_SINGLE_RBRC";
        };

        mc_single_eql: mc_single_eql {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp EQUAL>;

            label = "MC_SINGLE_EQL";
        };

        mc_single_tap: mc_single_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_tap>, <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "MC_SINGLE_TAP";
        };

        mc_sw_tap_sw: mc_sw_tap_sw {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_SW_TAP_SW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bare_keys_layer {
            bindings = <
&mt LEFT_SHIFT ESCAPE  &kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T       &kp Y        &kp U      &kp I      &kp O    &kp P     &kp LBKT  &kp RET
                       &kp CAPS   &kp A  &kp S  &kp D     &kp F      &kp G       &kp H        &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
                       &kp LCTRL  &kp M  &kp Z  &kp X     &kp C      &kp V       &kp B        &kp N      &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                                                &kp LGUI  &kp SPACE  &kp LALT    &lt 3 SPACE  &kp SPACE  &kp LGUI
            >;
        };

        as_ru_layer {
            bindings = <
&mt LSHFT ESC  &kp TAB       &as LS(Q) Q  &as LS(W) W  &as LS(E) E  &as LS(R) R      &as LS(T) T    &as LS(Y) Y  &as LS(U) U      &as LS(I) I          &as LS(O) O      &as LS(P) P               &as LS(LBKT) LBKT  &kp ENTER
               &mc_ru_en_sw  &as LS(A) A  &as LS(S) S  &as LS(D) D  &as LS(F) F      &as LS(G) G    &as LS(H) H  &as LS(J) J      &as LS(K) K          &as LS(L) L      &as LS(SEMI) SEMI         &as LS(SQT) SQT
               &kp LCTRL     &as LS(M) M  &as LS(Z) Z  &as LS(X) X  &as LS(C) C      &as LS(V) V    &as LS(B) B  &as LS(N) N      &as LS(COMMA) COMMA  &as LS(DOT) DOT  &as_single FSLH QUESTION  &as LS(RBKT) RBKT
                                                       &kp LWIN     &lt_spc 2 SPACE  &kp LALT       &lt 3 SPACE  &lt_spc 2 SPACE  &kp RGUI
            >;
        };

        nav_ru_layer {
            bindings = <
&trans  &kp ESC      &trans     &ru_as_dollar_at 0 0  &ru_as_amp 0 PERCENT  &trans                 &ru_as_tilde_grave 0 0        &trans                  &as_single EXCL LS(N7)  &kp UP            &kp BSPC          &trans                     &ru_as_lbrc_lbkt 0 0     &trans
        &kp TAB      &kp LCTRL  &kp LSHFT             &kp LALT              &kp LGUI               &as_single EQUAL LS(EQUAL)    &as_single UNDER MINUS  &kp LEFT                &kp DOWN          &kp RIGHT         &as_single LS(N4) LS(N6)   &ru_as_siquote 0 LS(N2)
        &kp LS(TAB)  &trans     &trans                &trans                &ru_as_caret_hash 0 0  &ru_as_pipe 0 LS(BSLH)        &as_single BSLH LS(N8)  &as_single SLASH RET    &ru_as_lt 0 LPAR  &ru_as_gt 0 RPAR  &as_single SLASH QUESTION  &ru_as_rbrc_rbkt 0 0
                                                      &trans                &mc_single_spc         &trans                        &none                   &mc_single_spc          &none
            >;
        };

        num_ru_layer {
            bindings = <
&trans  &kp TAB  &kp F9  &kp F10  &kp F11  &kp F12  &kp LS(N9)       &kp LS(N0)       &kp N7  &kp N8      &kp N9  &kp BSPC   &kp LS(N9)        &kp ENTER
        &none    &kp F5  &kp F6   &kp F7   &kp F8   &kp EQUAL        &kp MINUS        &kp N4  &kp N5      &kp N6  &kp SEMI   &kp SINGLE_QUOTE
        &trans   &kp F1  &kp F2   &kp F3   &kp F4   &kp KP_DIVIDE    &kp KP_ASTERISK  &kp N1  &kp N2      &kp N3  &kp SLASH  &kp LS(N0)
                                  &trans   &trans   &trans           &trans           &kp N0  &kp KP_DOT
            >;
        };

        as_en_layer {
            bindings = <
&mt LSHFT ESC  &kp TAB       &as LS(Q) Q  &as LS(W) W  &as LS(E) E  &as LS(R) R      &as LS(T) T    &as LS(Y) Y  &as LS(U) U      &as LS(I) I          &as LS(O) O      &as LS(P) P       &as LS(LBKT) LBKT             &kp ENTER
               &mc_ru_en_sw  &as LS(A) A  &as LS(S) S  &as LS(D) D  &as LS(F) F      &as LS(G) G    &as LS(H) H  &as LS(J) J      &as LS(K) K          &as LS(L) L      &as SEMI COLON    &as APOSTROPHE DOUBLE_QUOTES
               &kp LCTRL     &as LS(M) M  &as LS(Z) Z  &as LS(X) X  &as LS(C) C      &as LS(V) V    &as LS(B) B  &as LS(N) N      &as LS(COMMA) COMMA  &as LS(DOT) DOT  &as PERIOD COMMA  &as LS(RBKT) RBKT
                                                       &kp LWIN     &lt_spc 5 SPACE  &kp LALT       &lt 6 SPACE  &lt_spc 5 SPACE  &kp RGUI
            >;
        };

        nav_en_layer {
            bindings = <
&trans  &kp ESCAPE   &trans     &as DOLLAR AT  &as AMPS PERCENT  &trans          &as TILDE GRAVE    &trans                &as EXCLAMATION QUESTION  &kp UP       &kp BSPC     &trans  &trans  &trans
        &kp TAB      &kp LCTRL  &kp LSHFT      &kp LALT          &kp LGUI        &as EQUAL PLUS     &as UNDERSCORE MINUS  &kp LEFT                  &kp DOWN     &kp RIGHT    &trans  &trans
        &kp LS(TAB)  &trans     &trans         &trans            &as CARET HASH  &as PIPE SLASH     &as BSLH ASTERISK     &as DOT RET               &as LT LPAR  &as GT RPAR  &trans  &trans
                                               &trans            &mc_single_spc  &trans             &none                 &mc_single_spc            &none
            >;
        };

        num_en_layer {
            bindings = <
&trans  &kp TAB  &kp F9  &kp F10  &kp F11  &kp F12  &kp LS(N9)       &kp LS(N0)       &kp N7  &kp N8      &kp N9  &kp BSPC   &kp LS(N9)        &kp ENTER
        &none    &kp F5  &kp F6   &kp F7   &kp F8   &kp EQUAL        &kp MINUS        &kp N4  &kp N5      &kp N6  &kp SEMI   &kp SINGLE_QUOTE
        &trans   &kp F1  &kp F2   &kp F3   &kp F4   &kp KP_DIVIDE    &kp KP_ASTERISK  &kp N1  &kp N2      &kp N3  &kp SLASH  &kp LS(N0)
                                  &trans   &trans   &trans           &trans           &kp N0  &kp KP_DOT
            >;
        };
    };
};
