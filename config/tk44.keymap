/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF   0
#define LWR   1
#define RSE   2
#define ADJ   3
#define LWALT 4


#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
        macros {
                cmd_del: cmd_del {
                    label = "cmd_del";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_press &kp RWIN>
                        , <&macro_tap &kp BSPC>
                        , <&macro_release &kp RWIN>
                        ;
                };

                alt_del: alt_del {
                    label = "alt_del";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_press &kp RALT>
                        , <&macro_tap &kp BSPC>
                        , <&macro_release &kp RALT>
                        ;
                };
        };

        behaviors {
                bhm: balanced_homerow_mods {
                    compatible = "zmk,behavior-hold-tap";
                    label = "HOMEROW_MODS";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;    // <---[[moderate duration]]
                    quick-tap-ms = <0>;
                    flavor = "balanced";
                    bindings = <&kp>, <&kp>;
                };

                ht_tp: tp_homerow_mods {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TP_HOMEROW_MODS";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;    // <---[[moderate duration]]
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };

                as: auto_shift {
                    compatible = "zmk,behavior-hold-tap";
                    label = "AUTO_SHIFT";
                    #binding-cells = <2>;
                    tapping_term_ms = <250>;
                    quick_tap_ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };

                pht: positional_hold_tap {
                    compatible = "zmk,behavior-hold-tap";
                    label = "POSITIONAL_HOLD_TAP";
                    #binding-cells = <2>;
                    flavor = "hold-preferred";
                    tapping-term-ms = <400>;
                    quick-tap-ms = <200>;
                    bindings = <&kp>, <&kp>;
                    hold-trigger-key-positions = <1>;    // <---[[the W key]]
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {

                        bindings = <

   &mt LSHFT ESC    &mt GRAVE TAB        AS(Q)          AS(W)   AS(E)   AS(R)             AS(T)               AS(Y)                AS(U)            AS(I)            AS(O)           AS(P)           &mt LBKT BSPC    &mt RSHFT ENTER
                    &mt LCTRL CAPS       AS(A)          AS(S)   AS(D)   AS(F)             AS(G)               AS(H)                AS(J)            AS(K)            AS(L)           AS(SEMI)        AS(SQT)
                    &kp LSHFT            &mt LSHFT Z    AS(Z)   AS(X)   AS(C)             AS(V)               AS(B)                &ht_tp M N       AS(COMMA)        AS(DOT)         &mt RSHFT FSLH  &mt RSHFT LBKT 
                                                                        &mt LCTRL SPACE   &mt LALT SPACE      &mt LWIN SPACE       &lt RSE SPACE    &lt LWR SPACE    &lt RSE SPACE
                        >;
                };
                lower_layer {
                        bindings = <

   &trans     &trans         &kp LS(N1)   &kp LS(N2)  &kp LS(N3)  &kp LS(N4)     &kp LS(N5)              &kp LS(N6)        &kp LS(N7)  &kp LS(N8)   &kp LS(N9)   &kp LS(N0)      &alt_del            &cmd_del
              &kp BSLH       &kp N1       &kp N2      &kp N3      &kp N4         &kp N5                  &kp ASTRK         &kp N4      &kp N5       &kp N6       AS (MINUS)      AS (EQUAL)
              &trans         &kp LSHFT    &kp F2      &kp F3      &kp F4         &kp F5                  &kp PIPE2         &kp N1      &kp LT       &kp GT       AS (RBKT)       AS (LBKT)
                                                      &trans      &trans         &trans                  &kp SPACE         &trans      &kp N0 
                        >;
                };

                raise_layer {
                        bindings = <

   &trans   &trans  &none   &none  &none   &none   &mo ADJ      &kp N7    &kp N8     &kp N9    &none      &none     &alt_del  &trans
            &none   &none   &none  &none   &none   &none        &kp N4    &kp N5     &kp N6    &none      &kp UP    &none
            &trans  &trans  &none  &none   &none   &none        &kp N1    &kp N2     &kp N3    &kp LEFT   &kp DOWN  &kp RIGHT
                                   &trans  &trans  &trans       &trans    &kp SPACE  &kp N0
                        >;
                };
                adjust_layer {
                        bindings = <

   &none      &bootloader &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none   &none
              &none       &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none
              &bt BT_CLR  &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none
                                        &none   &none  &none        &trans         &none          &trans
                        >;
                };

                lower_alt {
                        bindings = <

   &trans     &trans         &none        &none   &none       &none     &none                   &kp KP_DIVIDE     &kp N7      &kp N8   &kp N9   &kp LPAR        &mt RPAR BSPC  &trans
              &kp BSLH       &kp N1       &kp N2  &kp N3      &kp N4    &kp N5                  &kp ASTRK         &kp N4      &kp N5   &kp N6   &kp MINUS       &kp PLUS
              &trans         &kp LSHFT    &kp F2  &kp F3      &kp F4    &kp F5                  &kp PIPE2         &kp N1      &kp N2   &kp N3   &mt RSHFT LBKT  &mt RSHFT RBKT
                                                  &trans      &trans    &trans                  &kp SPACE         &trans      &kp N0 
                        >;
                };
        };
};
