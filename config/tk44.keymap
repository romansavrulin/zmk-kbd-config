/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF    0
#define NUM    1
#define ADJ    2

&lt {
    quick-tap-ms = <160>;
};

&mt {
    quick-tap-ms = <160>;
};

&kscan0 {
    debounce-press-ms = <1>;
    debounce-release-ms = <10>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_bootldr {
            bindings = <&bootloader>;
            key-positions = <40 6 1>;
        };

        combo_bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <26 6 40>;
        };

        combo_bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <40 6 27>;
        };

        combo_bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <40 6 28>;
        };

        combo_bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <40 6 29>;
        };

        combo_bare_ru_tog {
            bindings = <&tog 1>;
            key-positions = <41 7 13>;
            layers = <0 1>;
        };

        combo_bt_3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <40 6 30>;
        };

        combo_ru_en_tog {
            bindings = <&tog 4>;
            key-positions = <41 7 12>;
            layers = <1 4>;
        };

        combo_en_to_bare {
            bindings = <&mc_to_bare_en>;
            key-positions = <41 7 13>;
            layers = <4>;
        };

        output_toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <41 8 13>;
        };
    };

    behaviors {
        ru_as_common: ru_as_common {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_COMMON";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_lbkt: ru_as_lbkt {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_LBKT";
            bindings = <&mc_ru_lbrc>, <&mc_ru_lbkt>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_quote: ru_as_quote {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_QUOTE";
            bindings = <&mc_ru_si_quote>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_rbkt: ru_as_rbkt {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_RBKT";
            bindings = <&mc_ru_rbrc>, <&mc_ru_rbkt>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_lpar: ru_as_lpar {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_LPAR";
            bindings = <&mc_ru_lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_rpar: ru_as_rpar {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_RPAR";
            bindings = <&mc_ru_gt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_grave: ru_as_grave {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_GRAVE";
            bindings = <&mc_ru_tilde>, <&mc_ru_grave>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_at: ru_as_at {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_AT";
            bindings = <&mc_ru_dollar>, <&mc_ru_at>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_hash: ru_as_hash {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_HASH";
            bindings = <&mc_ru_caret>, <&mc_ru_hash>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_slash: ru_as_slash {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_SLASH";
            bindings = <&mc_ru_pipe>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        ru_as_perc: ru_as_perc {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_AS_PERC";
            bindings = <&mc_ru_amp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 5 6 7 8 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 41 43 4 9>;
        };
    };

    macros {
        mc_ru_lbkt: mc_ru_lbkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp LBKT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_LBKT";
        };

        mc_ru_lbrc: mc_ru_lbrc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp LBRC>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_LBRC";
        };

        mc_ru_si_quote: mc_ru_si_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp SINGLE_QUOTE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_SI_QUOTE";
        };

        mc_ru_rbkt: mc_ru_rbkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp RBKT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_RBKT";
        };

        mc_ru_rbrc: mc_ru_rbrc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp RIGHT_BRACE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_RBRC";
        };

        mc_ru_lt: mc_ru_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp LT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_LT";
        };

        mc_ru_gt: mc_ru_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp GT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_GT";
        };

        mc_ru_grave: mc_ru_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_GRAVE";
        };

        mc_ru_tilde: mc_ru_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp TILDE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_TILDE";
        };

        mc_ru_at: mc_ru_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp AT>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_AT";
        };

        mc_ru_dollar: mc_ru_dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp DOLLAR>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_DOLLAR";
        };

        mc_ru_hash: mc_ru_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp HASH>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_HASH";
        };

        mc_ru_caret: mc_ru_caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp CARET>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_CARET";
        };

        mc_ru_pipe: mc_ru_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp PIPE>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_PIPE";
        };

        mc_ru_amp: mc_ru_amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp AMPS>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_RU_AMP";
        };

        mc_ru_en_sw: mc_ru_en_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&tog 4>;

            label = "MC_RU_EN_SW";
        };

        mc_to_bare_en: mc_to_bare_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 4 &tog 1>;
            label = "MC_TO_BARE_EN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bare_keys_layer {
            bindings = <
&mt LEFT_SHIFT ESCAPE  &kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T       &kp Y        &kp U      &kp I      &kp O    &kp P     &kp LBKT  &kp RET
                       &kp CAPS   &kp A  &kp S  &kp D     &kp F      &kp G       &kp H        &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
                       &kp LCTRL  &kp M  &kp Z  &kp X     &kp C      &kp V       &kp B        &kp N      &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                                                &kp LGUI  &kp SPACE  &kp LALT    &lt 3 SPACE  &kp SPACE  &kp LGUI
            >;
        };

        as_ru_layer {
            bindings = <
&mt LSHFT ESC  &kp TAB       &ru_as_common LS(Q) Q  &ru_as_common LS(W) W  &ru_as_common LS(E) E  &ru_as_common LS(R) R  &ru_as_common LS(T) T    &ru_as_common LS(Y) Y  &ru_as_common LS(U) U  &ru_as_common LS(I) I          &ru_as_common LS(O) O      &ru_as_common LS(P) P        &ru_as_common LS(LBKT) LBKT  &kp ENTER
               &mc_ru_en_sw  &ru_as_common LS(A) A  &ru_as_common LS(S) S  &ru_as_common LS(D) D  &ru_as_common LS(F) F  &ru_as_common LS(G) G    &ru_as_common LS(H) H  &ru_as_common LS(J) J  &ru_as_common LS(K) K          &ru_as_common LS(L) L      &ru_as_common LS(SEMI) SEMI  &ru_as_common LS(SQT) SQT
               &kp LCTRL     &ru_as_common LS(M) M  &ru_as_common LS(Z) Z  &ru_as_common LS(X) X  &ru_as_common LS(C) C  &ru_as_common LS(V) V    &ru_as_common LS(B) B  &ru_as_common LS(N) N  &ru_as_common LS(COMMA) COMMA  &ru_as_common LS(DOT) DOT  &ru_as_common FSLH LS(FSLH)  &ru_as_common LS(RBKT) RBKT
                                                                           &kp LWIN               &lt_spc 2 SPACE        &kp LALT                 &lt 3 SPACE            &lt_spc 2 SPACE        &kp RGUI
            >;
        };

        nav_ru_layer {
            bindings = <
&kp LS(TAB)  &trans   &trans     &ru_as_at 0 0  &ru_as_perc 0 PERCENT  &trans           &ru_as_grave 0 0                 &trans                         &ru_as_common LS(N1) LS(N7)  &kp UP              &kp BSPC            &trans                       &ru_as_lbkt 0 0        &trans
             &kp TAB  &kp LCTRL  &kp LSHFT      &kp LALT               &kp LGUI         &ru_as_common EQUAL LS(EQUAL)    &ru_as_common LS(MINUS) MINUS  &kp LEFT                     &kp DOWN            &kp RIGHT           &ru_as_common LS(N4) LS(N6)  &ru_as_quote 0 LS(N2)
             &trans   &trans     &trans         &trans                 &ru_as_hash 0 0  &ru_as_slash 0 LS(BSLH)          &ru_as_common BSLH LS(N8)      &ru_as_common FSLH RET       &ru_as_lpar 0 LPAR  &ru_as_rpar 0 RPAR  &trans                       &ru_as_rbkt 0 0
                                                &trans                 &none            &trans                           &none                          &none                        &none
            >;
        };

        num_ru_layer {
            bindings = <
&trans  &kp TAB  &kp F9  &kp F10  &kp F11  &kp F12  &kp LS(N9)       &kp LS(N0)       &kp N7      &kp N8  &kp N9  &kp BSPC   &kp LS(N9)        &kp ENTER
        &none    &kp F5  &kp F6   &kp F7   &kp F8   &kp EQUAL        &kp MINUS        &kp N4      &kp N5  &kp N6  &kp SEMI   &kp SINGLE_QUOTE
        &trans   &kp F1  &kp F2   &kp F3   &kp F4   &kp KP_DIVIDE    &kp KP_ASTERISK  &kp N1      &kp N2  &kp N3  &kp SLASH  &kp LS(N0)
                                  &trans   &trans   &trans           &trans           &kp KP_DOT  &kp N0
            >;
        };

        as_en_layer {
            bindings = <
&mt LSHFT ESC  &kp TAB       &ru_as_common LS(Q) Q  &ru_as_common LS(W) W  &ru_as_common LS(E) E  &ru_as_common LS(R) R  &ru_as_common LS(T) T    &ru_as_common LS(Y) Y  &ru_as_common LS(U) U  &ru_as_common LS(I) I          &ru_as_common LS(O) O      &ru_as_common LS(P) P       &ru_as_common LS(LBKT) LBKT             &kp ENTER
               &mc_ru_en_sw  &ru_as_common LS(A) A  &ru_as_common LS(S) S  &ru_as_common LS(D) D  &ru_as_common LS(F) F  &ru_as_common LS(G) G    &ru_as_common LS(H) H  &ru_as_common LS(J) J  &ru_as_common LS(K) K          &ru_as_common LS(L) L      &ru_as_common SEMI COLON    &ru_as_common APOSTROPHE DOUBLE_QUOTES
               &kp LCTRL     &ru_as_common LS(M) M  &ru_as_common LS(Z) Z  &ru_as_common LS(X) X  &ru_as_common LS(C) C  &ru_as_common LS(V) V    &ru_as_common LS(B) B  &ru_as_common LS(N) N  &ru_as_common LS(COMMA) COMMA  &ru_as_common LS(DOT) DOT  &ru_as_common PERIOD COMMA  &ru_as_common LS(RBKT) RBKT
                                                                           &kp LWIN               &lt_spc 5 SPACE        &kp LALT                 &lt 6 SPACE            &lt_spc 5 SPACE        &kp RGUI
            >;
        };

        nav_en_layer {
            bindings = <
&kp LS(TAB)  &trans   &trans     &ru_as_common DOLLAR AT  &ru_as_common AMPS PERCENT  &trans                    &ru_as_common TILDE GRAVE    &trans                          &ru_as_common EXCLAMATION QUESTION  &kp UP                 &kp BSPC               &trans  &trans  &trans
             &kp TAB  &kp LCTRL  &kp LSHFT                &kp LALT                    &kp LGUI                  &ru_as_common EQUAL PLUS     &ru_as_common UNDERSCORE MINUS  &kp LEFT                            &kp DOWN               &kp RIGHT              &trans  &trans
             &trans   &trans     &trans                   &trans                      &ru_as_common CARET HASH  &ru_as_common PIPE SLASH     &ru_as_common BSLH ASTERISK     &ru_as_common DOT RET               &ru_as_common LT LPAR  &ru_as_common GT RPAR  &trans  &trans
                                                          &trans                      &none                     &trans                       &none                           &none                               &none
            >;
        };

        num_en_layer {
            bindings = <
&trans  &kp TAB  &kp F9  &kp F10  &kp F11  &kp F12  &kp LS(N9)       &kp LS(N0)       &kp N7      &kp N8  &kp N9  &kp BSPC   &kp LS(N9)        &kp ENTER
        &none    &kp F5  &kp F6   &kp F7   &kp F8   &kp EQUAL        &kp MINUS        &kp N4      &kp N5  &kp N6  &kp SEMI   &kp SINGLE_QUOTE
        &trans   &kp F1  &kp F2   &kp F3   &kp F4   &kp KP_DIVIDE    &kp KP_ASTERISK  &kp N1      &kp N2  &kp N3  &kp SLASH  &kp LS(N0)
                                  &trans   &trans   &trans           &trans           &kp KP_DOT  &kp N0
            >;
        };
    };
};
