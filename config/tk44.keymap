/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF    0
#define LWR    1
#define RSE    2
#define ADJ    3
#define R_CTLL 4


#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
        macros {
                cmd_del: cmd_del {
                    label = "cmd_del";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_press &kp RWIN>
                        , <&macro_tap &kp BSPC>
                        , <&macro_release &kp RWIN>
                        ;
                };

                cmd_enter: cmd_enter {
                    label = "cmd_enter";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_press &kp LWIN>
                        , <&macro_tap &kp ENTER>
                        , <&macro_release &kp LWIN>
                        ;
                };

                alt_del: alt_del {
                    label = "alt_del";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_press &kp RALT>
                        , <&macro_tap &kp BSPC>
                        , <&macro_release &kp RALT>
                        ;
                };

                at_cmb: at_cmb {
                    label = "at_cmb";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &kp AT>
                        , <&macro_pause_for_release>
                        , <&macro_wait_time 300>
                        , <&macro_tap_time 150>
                        , <&macro_tap &kp CAPS>
                        ;
                };
        };

        behaviors {
                bhm: balanced_homerow_mods {
                    compatible = "zmk,behavior-hold-tap";
                    label = "HOMEROW_MODS";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;    // <---[[moderate duration]]
                    quick-tap-ms = <0>;
                    flavor = "balanced";
                    bindings = <&kp>, <&kp>;
                };

                ht_tp: tp_homerow_mods {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TP_HOMEROW_MODS";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;    // <---[[moderate duration]]
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };

                as: auto_shift {
                    compatible = "zmk,behavior-hold-tap";
                    label = "AUTO_SHIFT";
                    #binding-cells = <2>;
                    tapping_term_ms = <200>;
                    quick_tap_ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };

                pht: positional_hold_tap {
                    compatible = "zmk,behavior-hold-tap";
                    label = "POSITIONAL_HOLD_TAP";
                    #binding-cells = <2>;
                    flavor = "hold-preferred";
                    tapping-term-ms = <400>;
                    quick-tap-ms = <200>;
                    bindings = <&kp>, <&kp>;
                    hold-trigger-key-positions = <1>;    // <---[[the W key]]
                };

                prog_caps: behavior_prog_caps_word {
                    compatible = "zmk,behavior-caps-word";
                    label = "PROG_CAPS";
                    #binding-cells = <0>;
                    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS CAPS>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {

                        bindings = <

   &mt LSHFT ESC    &mt GRAVE TAB        AS(Q)  AS(W)   AS(E)     AS(R)             AS(T)               AS(Y)            AS(U)            AS(I)            AS(O)           AS(P)           &mt LBKT BSPC    &mt BSLH ENTER
                    &mt LCTRL CAPS       AS(A)  AS(S)   AS(D)     AS(F)             AS(G)               AS(H)            AS(J)            AS(K)            AS(L)           AS(SEMI)        AS(SQT)
                    &kp LSHFT            AS(M)  AS(Z)   AS(X)     AS(C)             AS(V)               AS(B)            AS(N)            AS(COMMA)        AS(DOT)         AS(FSLH)        AS(LBKT)
                                                                  &mt LCTRL SPACE   &mt LALT SPACE      &mt LWIN SPACE   &lt RSE SPACE    &lt LWR SPACE    &lt R_CTLL SPACE
                        >;
                 };
                lower_layer {
                        bindings = <

   &trans     &trans         &kp LS(N1)   &kp LS(N2)  &kp LS(N3)  &kp LS(N4)     &kp LS(N5)              &kp LS(N6)        &kp LS(N7)  &kp LS(N8)   &kp LS(N9)   &kp LS(N0)     &alt_del            &cmd_del
              &none          AS(GRAVE)    &at_cmb     &none       &none          &none                   &kp KP_DIVIDE     &none       &none        AS(MINUS)    AS(EQUAL)      &none
              &trans         &kp LSHFT    &none       &none       &none          &none                   AS(BSLH)          &none       &kp LS(LT)   &kp LS(GT)   AS(RBKT)       AS(LBKT)
                                                      &trans      &trans         &trans                  &kp SPACE         &trans      &trans 
                        >;
                };

                raise_layer {
                        bindings = <

   &trans   &trans  &none   &none  &none   &none   &mo ADJ      &kp N7    &kp N8     &kp N9     &kp KP_PLUS  &kp KP_MULTIPLY    &cmd_del  &cmd_enter
            &none   &none   &none  &none   &none   &none        &kp N4    &kp N5     &kp N6     &kp KP_MINUS &kp KP_DIVIDE      &none
            &trans  &trans  &none  &none   &none   &none        &kp N1    &kp N2     &kp N3     &kp N0       &none              &none
                                   &trans  &trans  &trans       &trans    &kp SPACE  &kp KP_DOT
                        >;
                };
                adjust_layer {
                        bindings = <

   &none      &bootloader &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none   &none
              &none       &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none
              &bt BT_CLR  &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none
                                        &none   &none  &none        &trans         &none          &trans
                        >;
                };

                right_ctrl {
                        bindings = < 

   &trans   &trans  &none   &none  &none   &none   &mo ADJ      &kp F9          &kp F10       &kp F11   &kp F12    &prog_caps     &kp UP        &kp RIGHT
            &none   &none   &none  &none   &none   &none        &kp F5          &kp F6        &kp F7    &kp F8     &kp LEFT       &kp DOWN
            &trans  &trans  &none  &none   &none   &none        &kp F1          &kp F2        &kp F3    &kp F4     &kp C_VOL_DN   &kp C_VOL_UP
                                   &trans  &trans  &trans       &none           &kp K_MUTE    &none
                        >;
                };
        };
};
