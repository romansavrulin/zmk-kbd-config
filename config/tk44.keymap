/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF    0
#define NAV    1
#define NUM    2
#define ADJ    3
#define R_CTLL 4
#define DEL_LR 5


#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&lt { quick_tap_ms = <150>; };
&mt { quick_tap_ms = <150>; };
&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {
        macros {
                gt_en: gt_en {
                    label = "gt_en";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &kp GT>
                        , <&macro_pause_for_release>
                        , <&macro_wait_time 200> 
                        , <&macro_tap_time 150> 
                        , <&macro_tap &kp CAPS>
                        ;
                };

                lt_en: lt_en {
                    label = "lt_en";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &kp LT>
                        , <&macro_pause_for_release>
                        , <&macro_wait_time 200> 
                        , <&macro_tap_time 150> 
                        , <&macro_tap &kp CAPS>
                        ;
                };

                grave_en: grave_en {
                    label = "grave_en";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &kp GRAVE>
                        , <&macro_pause_for_release>
                        , <&macro_wait_time 200> 
                        , <&macro_tap_time 150> 
                        , <&macro_tap &kp CAPS>
                        ;
                };

                rbkt_en: rbkt_en {
                    label = "rbkt_en";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &kp RBKT>
                        , <&macro_pause_for_release>
                        , <&macro_wait_time 200> 
                        , <&macro_tap_time 150> 
                        , <&macro_tap &kp CAPS>
                        ;
                };

                lbkt_en: lbkt_en {
                    label = "lbkt_en";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &kp LBKT>
                        , <&macro_pause_for_release>
                        , <&macro_wait_time 200> 
                        , <&macro_tap_time 150> 
                        , <&macro_tap &kp CAPS>
                        ;
                };

                at_en: at_en {
                    label = "at_en";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &kp AT>
                        , <&macro_pause_for_release>
                        , <&macro_wait_time 200>
                        , <&macro_tap_time 150>
                        , <&macro_tap &kp CAPS>
                        ;
                };

                prog_caps_en: prog_caps_en {
                    label = "prog_caps_en";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp CAPS &prog_caps>
                        ;
                };

                nm_macro: nm_macro {
                    label = "nm_macro";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp N &kp M>
                        ;
                };

                bspc_mkr: bspc_mkr {
                    label = "bspc_mkr";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap_time 50>
                        , <&macro_tap &kp BSPC>
                        , <&to DEL_LR>
                        ;
                };
        };

        behaviors {
                prog_caps: behavior_prog_caps_word {
                    compatible = "zmk,behavior-caps-word";
                    label = "PROG_CAPS";
                    #binding-cells = <0>;
                    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS CAPS>;
                };

                td_lbkt_bspc_lbkt: td_lbkt_bspc_lbkt {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_lbkt_bspc_lbkt";
                    #binding-cells = <0>;
                    tapping-term-ms = <180>;
                    bindings = <&kp BSPC>, <&kp LBKT>;
                };

                td_p_bspc: td_p_bspc {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_p_bspc";
                    #binding-cells = <0>;
                    tapping-term-ms = <250>;
                    bindings = <&kp P>, <&bspc_mkr>;
                };

                td_o_bspc: td_o_bspc {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_o_bspc";
                    #binding-cells = <0>;
                    tapping-term-ms = <250>;
                    bindings = <&kp O>, <&bspc_mkr>;
                };

                td_lbkt_bspc: td_lbkt_p {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_lbkt_p";
                    #binding-cells = <0>;
                    tapping-term-ms = <250>;
                    bindings = <&kp LBKT>, <&bspc_mkr>;
                };

                td_n_m_nm: td_n_m_nm {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_n_m_nm";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp N>, <&kp M>, <&nm_macro>;
                };

                td_p_lbkt: td_p_lbkt {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_p_lbkt";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp P>, <&kp LBKT>;
                };

                td_sqt_lbkt: td_sqt_lbkt {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_sqt_lbkt";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp SQT>, <&kp LBKT>;
                };

                td_lshft_pg: td_lshft_pg {
                    compatible = "zmk,behavior-tap-dance";
                    label = "td_lshft_pg";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&sk LSHFT>, <&prog_caps>;
                };

                as: auto_shift {
                    compatible = "zmk,behavior-hold-tap";
                    label = "AUTO_SHIFT";
                    #binding-cells = <2>;
                    tapping_term_ms = <180>;   // <-----[[UNUSED]]
                    quick_tap_ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };

                bhm: balanced_homerow_mods {            // <---[[UNUSED]]
                    compatible = "zmk,behavior-hold-tap";
                    label = "HOMEROW_MODS";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;            // <---[[moderate duration]]
                    quick-tap-ms = <0>;
                    flavor = "balanced";
                    bindings = <&kp>, <&kp>;
                };

                ht_tp: tp_homerow_mods {                // <---[[UNUSED]]
                    compatible = "zmk,behavior-hold-tap";
                    label = "TP_HOMEROW_MODS";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;            // <---[[moderate duration]]
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };

                pht: positional_hold_tap {              // <---[[UNUSED]]
                    compatible = "zmk,behavior-hold-tap";
                    label = "POSITIONAL_HOLD_TAP";
                    #binding-cells = <2>;
                    flavor = "hold-preferred";
                    tapping-term-ms = <400>;
                    quick-tap-ms = <200>;
                    bindings = <&kp>, <&kp>;
                    hold-trigger-key-positions = <1>;    // <---[[the W key]]
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {

                        bindings = <

   &mt LSHFT ESC    &mt GRAVE TAB        &kp Q  &kp W   &kp E     &kp R             &kp T               &kp Y            &kp U            &kp I            &td_o_bspc      &kp P           &kp LBKT      &mt BSLH ENTER
                    &mt LCTRL CAPS       &kp A  &kp S   &kp D     &kp F             &kp G               &kp H            &kp J            &kp K            &kp L           &kp SEMI        &kp SQT
                    &td_lshft_pg         &kp M  &kp Z   &kp X     &kp C             &kp V               &kp B            &td_n_m_nm       &kp COMMA        &kp DOT         &kp FSLH        &kp RBKT
                                                                  &mt LCTRL SPACE   &mt LALT SPACE      &mt LWIN SPACE   &lt NUM SPACE    &lt NAV SPACE    &lt R_CTLL SPACE
                        >;
                 };
                nav_layer {
                        bindings = <

   &trans     &kp GRAVE      &kp LS(N1)   &kp LS(N2)  &kp LS(N3)  &kp LS(N4)     &kp LS(N5)              &kp LS(N6)        &kp LS(N7)     &kp UP          &kp BSPC        &kp LBKT       &kp BSPC     &mt BSLH ENTER
              &none          &grave_en    &at_en      &lbkt_en    &rbkt_en       &prog_caps_en           &kp KP_DIVIDE     &kp LEFT       &kp DOWN        &kp RIGHT       &kp RBKT       &lt_en          
              &trans         &none        &none       &none       &none          &none                   &kp LS(N8)        &kp MINUS      &kp EQUAL       &kp LS(N9)      &kp LS(N0)     &gt_en
                                                      &trans      &trans         &trans                  &kp SPACE         &trans         &kp SPACE
                        >;
                };

                num_layer {
                        bindings = <

   &trans   &trans  &none   &none  &none   &none   &mo ADJ      &mt KP_N7 N7    &mt KP_N8 N8     &mt KP_N9 N9       &kp BSPC        &kp KP_PLUS        &kp KP_ASTERISK   &kp ENTER
            &none   &none   &none  &none   &none   &none        &mt KP_N4 N4    &mt KP_N5 N5     &mt KP_N6 N6       &kp KP_MINUS    &kp LS(N9)         &kp LS(N0) 
            &trans  &none   &none  &none   &none   &none        &mt KP_N1 N1    &mt KP_N2 N2     &mt KP_N3 N3       &mt KP_N0 N0    &kp KP_DIVIDE      &none
                                   &trans  &trans  &trans       &trans          &kp SPACE        &kp KP_DOT
                       >;
                };
                adjust_layer {
                        bindings = <

   &none      &bootloader &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none   &none
              &none       &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none
              &bt BT_CLR  &none  &none  &none   &none  &none        &none          &none          &none          &none          &none         &none
                                        &none   &none  &none        &trans         &none          &trans
                        >;
                };

                right_ctrl {
                        bindings = < 
  
   &trans   &trans  &kp F9  &kp F10  &kp F11   &kp F12  &none           &none      &kp K_MUTE    &kp C_VOL_UP     &kp BSPC       &kp UP        &kp RIGHT       &kp ENTER  
            &none   &kp F5  &kp F6   &kp F7    &kp F8   &none           &none      &none         &kp C_VOL_DN     &kp LEFT       &kp DOWN      &kp LA(RIGHT)
            &trans  &kp F1  &kp F2   &kp F3    &kp F4   &none           &none      &none         &none            &kp LA(LEFT)   &kp LG(LEFT)  &kp LG(RIGHT)
                                     &trans    &trans   &trans          &kp SPACE  &kp SPACE     &none
                        >;
                };

                del_layer {
                        bindings = <

   &to DEF    &to DEF     &to DEF  &to DEF  &to DEF     &to DEF    &to DEF        &to DEF          &to DEF          &to DEF          &kp BSPC         &to DEF         &to DEF   &to DEF
              &to DEF     &to DEF  &to DEF  &to DEF     &to DEF    &to DEF        &to DEF          &to DEF          &to DEF          &to DEF          &to DEF         &to DEF
              &to DEF     &to DEF  &to DEF  &to DEF     &to DEF    &to DEF        &to DEF          &to DEF          &to DEF          &to DEF          &to DEF         &to DEF
                                            &to DEF     &trans     &trans         &to DEF          &to DEF          &to DEF
                        >;
                };
        };
};
