/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define FROM_TO(row, col) (((row) << 8) + (col))
#define MM_AS(NAME, KEY) \
  mm_as_##KEY: mm_as_##KEY { \
    compatible = "zmk,behavior-mod-morph"; \
    label = #NAME; \
    #binding-cells = <0>; \
    bindings = <&as LS(KEY) KEY>, <&kp KEY>; \
    mods = <(MOD_LSFT|MOD_RSFT|MOD_LGUI|MOD_LALT)>; \
    keep-mods = <(MOD_LSFT|MOD_RSFT|MOD_LGUI|MOD_LALT)>; \
  };

&lt { quick-tap-ms = <160>; };

&mt { quick-tap-ms = <160>; };

&kscan0 {
    debounce-press-ms = <1>;
    debounce-release-ms = <10>;
};

&default_merger {
    map = <
                FROM_TO(42,39)
    >;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_bootldr {
            bindings = <&bootloader>;
            key-positions = <40 6 1>;
        };

        combo_bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <26 6 40>;
        };

        combo_bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <40 6 27>;
        };

        combo_bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <40 6 30>;
        };

        combo_bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <40 6 29>;
        };

        combo_bare_ru_tog {
            bindings = <&tog 1>;
            key-positions = <41 7 13>;
            layers = <0 1>;
        };

        combo_ru_en_tog {
            bindings = <&tog 4>;
            key-positions = <41 7 12>;
            layers = <1 4>;
        };

        combo_en_to_bare {
            bindings = <&mc_to_bare_en>;
            key-positions = <41 7 13>;
            layers = <4>;
        };

        output_toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <41 7 10>;
        };
    };

    behaviors {
        MM_AS(q, Q)
        MM_AS(w, W)
        MM_AS(e, E)
        MM_AS(r, R)
        MM_AS(t, T)
        MM_AS(y, Y)
        MM_AS(u, U)
        MM_AS(i, I)
        MM_AS(o, O)
        MM_AS(p, P)

        MM_AS(a, A)
        MM_AS(s, S)
        MM_AS(d, D)
        MM_AS(f, F)
        MM_AS(g, G)
        MM_AS(h, H)
        MM_AS(j, J)
        MM_AS(k, K)
        MM_AS(l, L)

        MM_AS(m, M)
        MM_AS(z, Z)
        MM_AS(x, X)
        MM_AS(c, C)
        MM_AS(v, V)
        MM_AS(b, B)
        MM_AS(n, N)

        MM_AS(comma, COMMA)
        MM_AS(dot, DOT)
        MM_AS(lbkt, LBKT)
        MM_AS(rbkt, RBKT)
        MM_AS(semi, SEMI)
        MM_AS(sqt, SQT)

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&mc_single_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 5 6 7 8 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 41 43 4 9>;
        };

        as_single: as_single {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_SINGLE";
            bindings = <&mc_single_tap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        as_sw_single: as_sw_single {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_SW_SINGLE";
            bindings = <&mc_sw_tap_sw>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        sw_as_sw_single: sw_as_sw_single {
            compatible = "zmk,behavior-hold-tap";
            label = "SW_AS_SW_SINGLE";
            bindings = <&mc_sw_tap_sw>, <&mc_sw_tap_sw>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        sw_as_single: sw_as_single {
            compatible = "zmk,behavior-hold-tap";
            label = "SW_AS_SINGLE";
            bindings = <&mc_single_tap>, <&mc_sw_tap_sw>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        as_ru_en_sw: as_ru_en_sw {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_RU_EN_SW";
            bindings = <&kp>, <&mc_ru_en_sw>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    macros {
        mc_ru_en_sw: mc_ru_en_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&tog 4>;

            label = "MC_RU_EN_SW";
        };

        mc_to_bare_en: mc_to_bare_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 4 &tog 1>;
            label = "MC_TO_BARE_EN";
        };

        mc_single_tap: mc_single_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_tap>, <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "MC_SINGLE_TAP";
        };

        mc_sw_tap_sw: mc_sw_tap_sw {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap_time 80>,
                <&kp CAPS>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap_time 80>,
                <&kp CLCK>,
                <&macro_wait_time 20>;

            label = "MC_SW_TAP_SW";
        };

        mc_nav_for_num_bare: mc_nav_for_num_bare {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&to 6>,
                <&macro_press>,
                <&kp SPACE>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp SPACE>,
                <&macro_tap>,
                <&to 0>;

            label = "MC_NAV_FOR_NUM_BARE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bare_keys_layer {
            bindings = <
&mt LEFT_SHIFT ESCAPE  &kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T       &kp Y                 &kp U  &kp I      &kp O    &kp P     &kp LBKT  &kp RET
                       &kp CAPS   &kp A  &kp S  &kp D     &kp F      &kp G       &kp H                 &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
                       &kp LCTRL  &kp M  &kp Z  &kp X     &kp C      &kp V       &kp B                 &kp N  &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                                                &kp LGUI  &kp SPACE  &kp LALT    &mc_nav_for_num_bare  &none  &kp LGUI
            >;
        };

        as_ru_layer {
            bindings = <
&mt LSHFT ESC  &kp TAB               &mm_as_Q  &mm_as_W  &mm_as_E  &mm_as_R         &mm_as_T    &mm_as_Y     &mm_as_U  &mm_as_I      &mm_as_O    &mm_as_P                  &mm_as_LBKT  &as_single RET RET
               &as_ru_en_sw LSHFT 0  &mm_as_A  &mm_as_S  &mm_as_D  &mm_as_F         &mm_as_G    &mm_as_H     &mm_as_J  &mm_as_K      &mm_as_L    &mm_as_SEMI               &mm_as_SQT
               &kp LCTRL             &mm_as_M  &mm_as_Z  &mm_as_X  &mm_as_C         &mm_as_V    &mm_as_B     &mm_as_N  &mm_as_COMMA  &mm_as_DOT  &as_single FSLH QUESTION  &mm_as_RBKT
                                                         &kp LWIN  &lt_spc 2 SPACE  &kp LALT    &lt 3 SPACE  &none     &kp RGUI
            >;
        };

        nav_ru_layer {
            bindings = <
&trans  &kp ESC      &trans     &sw_as_sw_single DOLLAR AT  &as_sw_single AMPS PERCENT  &trans                       &sw_as_sw_single TILDE GRAVE    &trans                  &as_single EXCL LS(N7)  &kp UP                 &kp BSPC               &trans                     &sw_as_sw_single LBRC LBKT         &trans
        &kp TAB      &kp LCTRL  &kp LSHFT                   &kp LALT                    &kp LGUI                     &as_single EQUAL LS(EQUAL)      &as_single UNDER MINUS  &kp LEFT                &kp DOWN               &kp RIGHT              &as_single LS(N4) LS(N6)   &as_sw_single SINGLE_QUOTE LS(N2)
        &kp LS(TAB)  &trans     &trans                      &trans                      &sw_as_sw_single CARET HASH  &as_sw_single PIPE LS(BSLH)     &as_single BSLH LS(N8)  &as_single RET RET      &as_sw_single LT LPAR  &as_sw_single GT RPAR  &as_single SLASH QUESTION  &sw_as_sw_single RBRC RBKT
                                                            &trans                      &mc_single_tap SPACE         &trans                          &none                   &none                   &none
            >;
        };

        num_ru_layer {
            bindings = <
&trans  &kp TAB  &kp F9  &kp F10  &kp F11  &kp F12  &mc_single_tap LS(N9)       &mc_single_tap LS(N0)       &kp N7  &kp N8                 &kp N9  &kp BSPC                   &sw_as_sw_single LBRC LBKT         &kp ENTER
        &none    &kp F5  &kp F6   &kp F7   &kp F8   &mc_single_tap PLUS         &mc_single_tap MINUS        &kp N4  &kp N5                 &kp N6  &as_single LS(N4) LS(N6)   &as_sw_single SINGLE_QUOTE LS(N2)
        &trans   &kp F1  &kp F2   &kp F3   &kp F4   &mc_single_tap KP_DIVIDE    &mc_single_tap KP_ASTERISK  &kp N1  &kp N2                 &kp N3  &as_single SLASH QUESTION  &sw_as_sw_single RBRC RBKT
                                  &trans   &kp N0   &mc_single_tap EQUAL        &trans                      &none   &mc_single_tap KP_DOT
            >;
        };

        as_en_layer {
            bindings = <
&mt LSHFT ESC  &kp TAB               &mm_as_Q  &mm_as_W  &mm_as_E  &mm_as_R         &mm_as_T    &mm_as_Y     &mm_as_U  &mm_as_I      &mm_as_O                &mm_as_P                 &as_single LS(LBKT) LBKT             &kp ENTER
               &as_ru_en_sw LSHFT 0  &mm_as_A  &mm_as_S  &mm_as_D  &mm_as_F         &mm_as_G    &mm_as_H     &mm_as_J  &mm_as_K      &mm_as_L                &as_single SEMI COLON    &as_single APOSTROPHE DOUBLE_QUOTES
               &kp LCTRL             &mm_as_M  &mm_as_Z  &mm_as_X  &mm_as_C         &mm_as_V    &mm_as_B     &mm_as_N  &mm_as_COMMA  &as_single LS(DOT) DOT  &as_single PERIOD COMMA  &as_single LS(RBKT) RBKT
                                                         &kp LWIN  &lt_spc 5 SPACE  &kp LALT    &lt 6 SPACE  &none     &kp RGUI
            >;
        };

        nav_en_layer {
            bindings = <
&trans  &kp ESCAPE   &trans     &as_single DOLLAR AT  &as_single AMPS PERCENT  &trans                 &as_single TILDE GRAVE    &trans                       &as_single EXCLAMATION QUESTION  &kp UP              &kp BSPC            &trans  &trans  &trans
        &kp TAB      &kp LCTRL  &kp LSHFT             &kp LALT                 &kp LGUI               &as_single EQUAL PLUS     &as_single UNDERSCORE MINUS  &kp LEFT                         &kp DOWN            &kp RIGHT           &trans  &trans
        &kp LS(TAB)  &trans     &trans                &trans                   &as_single CARET HASH  &as_single PIPE SLASH     &as_single BSLH ASTERISK     &as_single RET RET               &as_single LT LPAR  &as_single GT RPAR  &trans  &trans
                                                      &trans                   &mc_single_tap SPACE   &trans                    &none                        &none                            &none
            >;
        };

        num_en_layer {
            bindings = <
&trans  &kp TAB  &kp F9  &kp F10  &kp F11  &kp F12  &mc_single_tap LS(N9)       &mc_single_tap LS(N0)       &kp N7  &kp N8                 &kp N9  &kp BSPC  &trans  &as_single RET RET
        &none    &kp F5  &kp F6   &kp F7   &kp F8   &mc_single_tap PLUS         &mc_single_tap MINUS        &kp N4  &kp N5                 &kp N6  &trans    &trans
        &trans   &kp F1  &kp F2   &kp F3   &kp F4   &mc_single_tap KP_DIVIDE    &mc_single_tap KP_ASTERISK  &kp N1  &kp N2                 &kp N3  &trans    &trans
                                  &trans   &kp N0   &mc_single_tap EQUAL        &trans                      &none   &mc_single_tap KP_DOT
            >;
        };
    };
};
